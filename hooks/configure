#!/bin/sh -e
#
# Copyright (C) 2017 Canonical Ltd
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 3 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# check if we have core support and exit cleanly if not
if ! systemctl --version >/dev/null 2>&1; then
    echo "Cannot run systemctl - is core-support available?"
    exit 0
fi

# list of services we can disable and enable
SERVICES="ssh"

switch_handle_power_key() {
    dir="/etc/systemd/logind.conf.d"
    path="$dir/00-snap-core.conf"

    # Make sure the conf dir exists
    if [ ! -d $dir ]; then
        mkdir -p $dir
    fi

    case $1 in
        ignore|poweroff|reboot|halt|kexec|suspend|hibernate|hybrid-sleep|lock)
            cat <<EOF > $path
[Login]
HandlePowerKey=$1
EOF
            ;;
        *)
            echo "WARNING: invalid action '$1' supplied for system.power-key-action option"
            exit 1
            ;;
    esac

}

switch_service() {
	case "$1" in
		false)
			# When the unit is already enabled but not active a call with
			# --now does start the unit so we have to check for that  case
			# and explicitly start the unit.
			if [ "$(systemctl is-enabled $2.service)" = "disabled" ]; then
				systemctl enable $2.service
			fi
			if [ "$(systemctl is-active $2.service)" = "inactive" ]; then
				systemctl start $2.service
			fi
			;;
		true)
			# A simple `systemctl disable --now ssh.service` doesn't work
			# and fails with an error message. Because of that we're going
			# in two steps here and disable first and then stopping the
			# service unit.
			systemctl disable $2.service
			systemctl stop $2.service
			;;
		*)
			echo "ERROR: Invalid value '$1' provided for option service.$2.disable"
			exit 1
	esac
}

for service in $SERVICES; do
    value=$(snapctl get service.$service.disable)
    if [ -n "$value" ]; then
        switch_service $value $service
    fi
done

powerkey=$(snapctl get system.power-key-action)
if [ -n "$powerkey" ]; then
    switch_handle_power_key $powerkey
fi
